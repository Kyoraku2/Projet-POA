Classes:

✓ : recopiées mais pas implémentée 
	// g arrêté paske je me suis dis go faire un vocal 
	// de confirmation de ce modele avant de recopier mdr

while(veut saisir){
	...saisie...
	changeCell();
}

//Pour les cases d'arrivée : 4 cases blanches au milieu si la longueur est paire, 5 sinon.

✓Enum COULEUR(BLUE,RED);

✓Public Board{
	//attributs
	private int cols
	private int rows
	private ArrayList<ArrayList<Cell>> cells
	private Position start_red
	private Position start_blue
	private Position end_red
	private Position end_blue

	public Board
	public Board(int c)

	//methodes
	public int getCols()
	public int getRows()
	public void init()
	public void changeCell()
	public boolean removeRider()
	public boolean addRider()
	public Position getRedStart()
	public Position getBlueStart()
	public Position getRedEnd()
	public Position getBlueEnd()
	public String toString()
}

✓Public Position{
	//attributs
	private int col;
	private int row;
	
	public Position(int c, int r)

	//methods
	public boolean isValid();
	public int getCol()
	public int getRow()
	public boolean equals(Position pos);
	public String toString();
}

✓Public Classe De{
	private int value;
	
	public De () {
		value=0;
	}
	
	public void rouler() {
		value=(int)(Math.random()*6)+1;
	}
	
	int getValue() {
		return value;
	}
}

✓Public Classe Rider{
	//attributs
	private Position pos;
	private Couleur color;

	public Rider(Position p, Couleur c)

	//methods
	public void move(Position to);
	public Postion getPos();
	public Couleur getColor();
}

✓ public class Game{
	private List<Rider> riders;
	private Board board;

	public Game()
	public Game(int size)

	//methods
	Public void play(int first); //boucle de jeu
	Public void turn(Rider p1, Rider r2); //tour par tour
	public String toString();
}

✓ Abstract Cell{
	//attributs
	private Position pos;
	private char symbole;
	
	public Cell(Position p,char s);

	//methods
	public char getSymbole();
	public Position getPosition();
}

✓ Abstract CellPlayable extends Cell implements Questionnable{
	//attributs
	private boolean occuped;
	
	public Cell(Position p,char s)

	//methods
	abstract Public String process(Rider r);
}

✓ Public CellFree extends PlayableCell {
	public CellFree(Position p)
	//methods
	public String process(Rider r);
}

✓Public CellHole extends PlayableCell {
	public CellHole(Position p)
	//methods
	public String process(Rider r);
}

✓Public CellHedge extends PlayableCell {
	public CellHedge(Position p)
	//methods
	public String process(Rider r);
}

✓Public CellRiver extends PlayableCell {
	public CellRiver()
	//methods
	public String process(Rider r);
}

✓Public CellSide extends Cell {
	public CellSide()
}

✓Public CellWhite extends Cell{
	public CellWhite()
}

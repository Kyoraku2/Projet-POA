Classes:

✓ : recopiées mais pas implémentée 
	// g arrêté paske je me suis dis go faire un vocal 
	// de confirmation de ce modele avant de recopier mdr

while(veut saisir){
	...saisie...
	changeCell();
}

//Pour les cases d'arrivée : 4 cases blanches au milieu si la longueur est paire, 5 sinon.

✓Enum COULEUR(BLUE,RED);

✓Public Board{
	//attributs
	private int cols; //longueur
	private int rows; //largeur
	private ArrayList<ArrayList<Cell>> cells; //int[][]

	Public Board();
	Public Board(int cols);

	//methods
	public void init();
	public boolean removeCell(Position pos);
	public boolean addCell(Cell cell);
	public void changeCell(char symbole,Postion from); //En gros on part d'un plateau de cells vides et la on change
	public boolean removeRider(Position from);
	public boolean addRider(Position to);
	public void move(Position from, Position to);
	public String toString();
}

✓Public Position{
	//attributs
	private int col;
	private int row;

	//methods
	public boolean isValid();
	public int getCol();
	public int getRow();
	
	//Ajout
	public boolean equals(Position pos);
	public String toString();
}

Public Classe De{
	private int value;
	
	public De () {
		value=0;
	}
	
	public void rouler() {
		value=(int)(Math.random()*6)+1;
	}
	
	int getValue() {
		return value;
	}
}

Public Classe Rider{
	//attributs
	private Position pos;
	private Couleur color;

	//methods
	public void move(Position to);
	public Postion getPos();
	public Couleur getColor();
}

public class Game{
	private List<Rider> riders;
	private Board board;

	public Game(){
		riders=new List<Rider>();
		...
	}

	//methods
	Public void play(int first); //boucle de jeu
	Public void turn(Rider p1, Rider r2); //tour par tour
	public String toString();
}

Abstract Cell{
	Public Cell(Position pos,char symbole);
	//attributs
	private Position pos;
	private char symbole;
	
	//methods
	public char getSymbole();
	public Position getPosition();
}

Abstract PlayableCell extends Cell implements Questionnable{
	Public Cell(Position pos,char symbole){
		super(pos,symbole);
		occuped=false;
	}
	//attributs
	private boolean occuped;
	
	//methods
	abstract Public String process(Rider r);
}

Public CellFree extends PlayableCell {
	Public CellFree(Position pos){
		super(pos,'.');
	}
	//methods
	Public String process(Rider r);
}

Public CellHole extends PlayableCell {
	Public CellHole(Position pos){
		super(pos,'@');
	}
	//methods
	Public String process(Rider r);
}

Public CellHedge extends PlayableCell {
	Public CellHedge(Position pos){
		super(pos,'|');
	}
	//methods
	Public String process(Rider r);
}

Public CellRiver extends PlayableCell {
	Public CellRiver(){
		super(pos,'~');
	}
	//methods
	Public String process(Rider r);
}

Public CellSide extends Cell {
	Public CellSide(){
		super(pos,'+');
	}
}

Public CellWhite extends Cell{
	Public CellWhite(){
		super(pos,'');
	}
}
